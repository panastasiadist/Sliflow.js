import './main.css';
import Bus from './Bus';
import Runtime from './Runtime';
import BusEvent from './Enums/BusEvent';
import Projector from './Projector';
import Configuration from './Configuration';
import SwipePlugin from './Plugins/SwipePlugin';
import NavigationPlugin from './Plugins/NavigationPlugin';
import StateUpdatePlugin from './Plugins/StateUpdatePlugin';
import SlideRefreshPlugin from './Plugins/SlideRefreshPlugin';
import ResizeRefreshPlugin from './Plugins/ResizeRefreshPlugin';
import TimedTransitionPlugin from './Plugins/TimedTransitionPlugin';
import DirectionRefreshPlugin from './Plugins/DirectionRefreshPlugin';
import LoopSwitchingStrategy from './Strategies/LoopSwitchingStrategy';
import LoopProjectionStrategy from './Strategies/LoopProjectionStrategy';
import ResetSwitchingStrategy from './Strategies/ResetSwitchingStrategy';
import SimpleSwitchingStrategy from './Strategies/SimpleSwitchingStrategy';
import SimpleProjectionStrategy from './Strategies/SimpleProjectionStrategy';
import ObjectConfigurationLoadingStrategy from './Strategies/ObjectConfigurationLoadingStrategy';
import AttributeConfigurationLoadingStrategy from './Strategies/AttributeConfigurationLoadingStrategy';

/**
 * The Slider class encapsulate logic and controls for a single slider instance.
 * It ties together various aspects of the slider functionality.
 *
 * @since 0.1.0
 */
export default class Slider {
    /**
     * Constructor for this class.
     *
     * @since 0.1.0
     * @param element - The HTML element on which this instance will operate.
     * @param config - An optional set of configuration options that will override any attributes present on the
     * slider's HTML element.
     * @throws Error - If unable to create a Slider instance, for example, when not running in a browser environment or
     * due to the provided element not being properly structured or missing required child elements.
     */
    constructor(element: HTMLElement, config: Record<string, unknown> = {}) {
        if (typeof window === 'undefined') {
            throw new Error('No browser environment');
        }

        const bus = new Bus();

        // The order of strategies does matter.
        // The configuration generated by latter strategies override those generated by earlier ones.
        const configuration = new Configuration([
            new AttributeConfigurationLoadingStrategy(element),
            new ObjectConfigurationLoadingStrategy(config),
        ]);

        const runtime = new Runtime(
            element,
            window.getComputedStyle(element).direction === 'rtl',
            configuration.getValue<string>('orientationMode', 'horizontal') === 'horizontal',
        );

        const projector = new Projector(runtime, bus);

        const strategy = configuration.getValue<string>('replayStrategy', 'none');

        // Depending upon specific configuration values, set specific strategies for projection and switching.
        if (strategy === 'loop') {
            projector.setSwitchingStrategy(new LoopSwitchingStrategy(projector));
            projector.setProjectionStrategy(new LoopProjectionStrategy(projector));
        } else if (strategy === 'rewind') {
            projector.setSwitchingStrategy(new ResetSwitchingStrategy(projector));
            projector.setProjectionStrategy(new SimpleProjectionStrategy(projector));
        } else if (strategy === 'none') {
            projector.setSwitchingStrategy(new SimpleSwitchingStrategy(projector));
            projector.setProjectionStrategy(new SimpleProjectionStrategy(projector));
        } else {
            throw new Error('Invalid configuration');
        }

        // Switch to the slide defined by the initialSlideIndex configuration option.
        projector.switch(configuration.getValue('initialSlideIndex', 0));

        // Initialize a set of plugins which provide necessary or optional functionality.
        new DirectionRefreshPlugin(runtime, configuration, projector, bus).init();
        new NavigationPlugin(runtime, configuration, projector, bus).init();
        new ResizeRefreshPlugin(runtime, configuration, projector, bus).init();
        new SlideRefreshPlugin(runtime, configuration, projector, bus).init();
        new StateUpdatePlugin(runtime, configuration, projector, bus).init();
        new SwipePlugin(runtime, configuration, projector, bus).init();
        new TimedTransitionPlugin(runtime, configuration, projector, bus).init();

        // Notify the bus that setup is complete and the slider is ready.
        bus.notify(BusEvent.SLIDER_READY);
    }
}
